replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a services account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the services account
  annotations: {}
  # The name of the services account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 1Gi

livenessProbe:
  httpGet:
    path: "/actuator/health/liveness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10
readinessProbe:
  httpGet:
    path: "/actuator/health/readiness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: {}

# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: {}

envFrom:
  - configMapRef:
      name: users-roles-configmap

nodeSelector: {}

tolerations: []

affinity: {}

db:
  url: "jdbc:postgresql://postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/usersroles"
  username: "usersroles"
  password: "usersroles"

redis:
  host: "redis-master.{{ .Release.Namespace }}.svc.cluster.local"
  port: "6379"
  username: "default"
  password: "admin"

keycloak:
  master:
    user: "user"
    password: "admin"
  clientToRealmRoleMigration:
    enabled: false # Set to true to import realm roles from client roles
    clientIds: frontend-cli

microservices:
  identityProviderUrl: http://identity-provider.{{ .Release.Namespace }}.svc.cluster.local:8080
  authenticationProviderUrl: http://authentication-provider.{{ .Release.Namespace }}.svc.cluster.local:8080
# In order to use an external file for initializing the mapping between roles and identity attributes, uncomment the
# following property section. 'enabled' must be set to true. 'filePath' must start with "file:"
# databaseSeeding:
#   roleIdentityAttributesMapping:
#     enabled: true
#     filePath: file:/app/config/roleAttributes.json
